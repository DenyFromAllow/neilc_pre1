#pragma once

enum BasicTypes :uint8 {
	Int8 = 0x01,
	Int16,
	Int32,
	Int64,
	Int128,
	Int256,
	Uint8,
	Uint16,
	Uint32,
	Uint64,
	Uint128,
	Uint256,
	Float,
	Double,
	Quadruple,

	I8vector = 0x11,
	I16vector,
	I32vector,
	I64vector,
	I128vector,
	I256vector,
	Ui8vector,
	Ui16vector,
	Ui32vector,
	Ui64vector,
	Ui128vector,
	Ui256vector,
	Fvector,
	Dvector,
	Qvector,

	Void	= 0x10,
	Ansi	= 0x50,
	Ascii	= 0x60,
	Utf8	= 0x70,
	utf16le	= 0x80,
	utf16be	= 0x90,
	utf32le	= 0xA0,
	utf32be	= 0xB0,
	ucs2le	= 0xC0,
	ucs2be	= 0xD0,
};

enum Instructions :uint8 {
	null=0,
	Add_2op,	Add_3op,
	Adc_2op,	Adc_3op,
	Sub_2op,	Sub_3op,
	Sbb_2op,	Sbb_3op,
	Mul_2op,	Mul_3op,	Mul_4op,
	Imul_2op,	Imul_3op,	Imul_4op,
	Div_2op,	Div_3op,	Div_4op,	Div_5op,
	Idiv_2op,	Idiv_3op,	Idiv_4op,	Idiv_5op,
	Rem_2op,	Rem_3op,
	Irem_2op,	Irem_3op,
	Inc_1op,
	Dec_1op,
	Nec_1op,

	Mov_2op = 0x20,
	Movsx_2op,
	Movzx_2op,
	Xchg_2op,
	Cvtf2i_2op,
	Cvti2f_2op,

	Abs_2op = 0x28,
	Rcp_2op,
	Min_2op,
	Max_2op,
	Sqrt_2op,
	Rsqrt_2op,

	And_2op=0x30,	And_3op,
	Andnot_2op,		Andnot_3op,
	Or_2op,			Or_3op,
	Not_2op,		Not_3op,
	Xor_2op,		Xor_3op,

	Shl_2op = 0x40,	Shl_3op,
	Shr_2op,		Shr_3op,

	Sal_2op,	Sal_3op,
	Sar_2op,	Sar_3op,
	Rol_2op,	Rol_3op,
	Ror_2op,	Ror_3op,
	Rcl_2op,	Rcl_3op,
	Rcr_2op,	Rcr_3op,

	Jmp_1op = 0x50,
	Call_other,
	Ret_noop,	Ret_other,
	Preret_1op,	Preret_other,

	Cmp_2op = 0x58,
	Test_1op,	Test_2op,
	Lea_2op = Mov_2op,

	Ja_1op = 0x60,
	Jb_1op,
	Jg_1op,
	Jl_1op,
	Jae_1op,
	Jbe_1op,
	Jge_1op,
	Jle_1op,

	Je_1op,
	Jne_1op,
	Js_1op,
	Jns_1op,
	Jc_1op,
	Jnc_1op,
	Jo_1op,
	Jno_1op,

	Cmova_2op = 0x70,
	Cmpvb_2op,
	Cmovg_2op,
	Cmovl_2op,
	Cmovae_2op,
	Cmpvbe_2op,
	Cmovge_2op,
	Cmovle_2op,

	Cmove_2op,
	Cmovne_2op,
	Cmovs_2op,
	Cmovns_2op,
	Cmovc_2op,
	Cmovnc_2op,
	Cmovo_2op,
	Cmovno_2op,

	Movsb_3op = 0xA0,
	Movsw_3op,
	Movsd_3op,
	Movsq_3op,

	Stosb_3op,
	Stosw_3op,
	Stosd_3op,
	Stosq_3op,

};

enum KeyWords :uint8 {
	instructions_begin,
	Add,
	Adc,
	Sub,
	Sbb,
	Mul,
	Imul,
	Div,
	Idiv,
	Rem,
	Irem,
	Inc,
	Dec,
	Nec,

	Mov,
	Movsx,
	Movzx,
	Xchg,
	Cvtf2i,
	Cvti2f,

	Abs,
	Rcp,
	Min,
	Max,
	Sqrt,
	Rsqrt,

	And,
	Andnot,
	Or,
	Not,
	Xor,

	Shl,
	Shr,

	Sal,
	Sar,
	Rol,
	Ror,
	Rcl,
	Rcr,

	Jmp,
	Call,
	Ret,
	Preret,

	Cmp,
	Test,
	Lea,

	Ja,
	Jb,
	Jg,
	Jl,
	Jae,
	Jbe,
	Jge,
	Jle,

	Je,
	Jne,
	Js,
	Jns,
	Jc,
	Jnc,
	Jo,
	Jno,

	Cmova,
	Cmpvb,
	Cmovg,
	Cmovl,
	Cmovae,
	Cmpvbe,
	Cmovge,
	Cmovle,

	Cmove,
	Cmovne,
	Cmovs,
	Cmovns,
	Cmovc,
	Cmovnc,
	Cmovo,
	Cmovno,

	Movsb,
	Movsw,
	Movsd,
	Movsq,

	Stosb,
	Stosw,
	Stosd,
	Stosq,

	instructions_end,
	keyword_begin = instructions_end,

	Offset,
	Sizeof,

};